use std::collections::HashMap;
pub fn paths_defined_elsewhere() -> HashMap<String, String> {
    let mut map = HashMap::<String, String>::new();
    map.insert("Bundle.entry.link".to_string(), "Bundle.link".to_string());
    map.insert(
        "CapabilityStatement.rest.operation".to_string(),
        "CapabilityStatement.rest.resource.operation".to_string(),
    );
    map.insert(
        "CapabilityStatement.rest.searchParam".to_string(),
        "CapabilityStatement.rest.resource.searchParam".to_string(),
    );
    map.insert(
        "ChargeItemDefinition.propertyGroup.applicability".to_string(),
        "ChargeItemDefinition.applicability".to_string(),
    );
    map.insert(
        "ClaimResponse.addItem.adjudication".to_string(),
        "ClaimResponse.item.adjudication".to_string(),
    );
    map.insert(
        "ClaimResponse.addItem.detail.adjudication".to_string(),
        "ClaimResponse.item.adjudication".to_string(),
    );
    map.insert(
        "ClaimResponse.addItem.detail.subDetail.adjudication".to_string(),
        "ClaimResponse.item.adjudication".to_string(),
    );
    map.insert(
        "ClaimResponse.adjudication".to_string(),
        "ClaimResponse.item.adjudication".to_string(),
    );
    map.insert(
        "ClaimResponse.item.detail.adjudication".to_string(),
        "ClaimResponse.item.adjudication".to_string(),
    );
    map.insert(
        "ClaimResponse.item.detail.subDetail.adjudication".to_string(),
        "ClaimResponse.item.adjudication".to_string(),
    );
    map.insert(
        "CodeSystem.concept.concept".to_string(),
        "CodeSystem.concept".to_string(),
    );
    map.insert(
        "Composition.section.section".to_string(),
        "Composition.section".to_string(),
    );
    map.insert(
        "ConceptMap.group.element.target.product".to_string(),
        "ConceptMap.group.element.target.dependsOn".to_string(),
    );
    map.insert(
        "Consent.provision.provision".to_string(),
        "Consent.provision".to_string(),
    );
    map.insert(
        "Contract.term.asset.answer".to_string(),
        "Contract.term.offer.answer".to_string(),
    );
    map.insert("Contract.term.group".to_string(), "Contract.term".to_string());
    map.insert(
        "ExampleScenario.process.step.alternative.step".to_string(),
        "ExampleScenario.process.step".to_string(),
    );
    map.insert(
        "ExampleScenario.process.step.operation.request".to_string(),
        "ExampleScenario.instance.containedInstance".to_string(),
    );
    map.insert(
        "ExampleScenario.process.step.operation.response".to_string(),
        "ExampleScenario.instance.containedInstance".to_string(),
    );
    map.insert(
        "ExampleScenario.process.step.process".to_string(),
        "ExampleScenario.process".to_string(),
    );
    map.insert(
        "ExplanationOfBenefit.addItem.adjudication".to_string(),
        "ExplanationOfBenefit.item.adjudication".to_string(),
    );
    map.insert(
        "ExplanationOfBenefit.addItem.detail.adjudication".to_string(),
        "ExplanationOfBenefit.item.adjudication".to_string(),
    );
    map.insert(
        "ExplanationOfBenefit.addItem.detail.subDetail.adjudication".to_string(),
        "ExplanationOfBenefit.item.adjudication".to_string(),
    );
    map.insert(
        "ExplanationOfBenefit.adjudication".to_string(),
        "ExplanationOfBenefit.item.adjudication".to_string(),
    );
    map.insert(
        "ExplanationOfBenefit.item.detail.adjudication".to_string(),
        "ExplanationOfBenefit.item.adjudication".to_string(),
    );
    map.insert(
        "ExplanationOfBenefit.item.detail.subDetail.adjudication".to_string(),
        "ExplanationOfBenefit.item.adjudication".to_string(),
    );
    map.insert(
        "GraphDefinition.link.target.link".to_string(),
        "GraphDefinition.link".to_string(),
    );
    map.insert(
        "ImplementationGuide.definition.page.page".to_string(),
        "ImplementationGuide.definition.page".to_string(),
    );
    map.insert(
        "Invoice.totalPriceComponent".to_string(),
        "Invoice.lineItem.priceComponent".to_string(),
    );
    map.insert(
        "MedicinalProductAuthorization.procedure.application".to_string(),
        "MedicinalProductAuthorization.procedure".to_string(),
    );
    map.insert(
        "MedicinalProductIngredient.substance.strength".to_string(),
        "MedicinalProductIngredient.specifiedSubstance.strength".to_string(),
    );
    map.insert(
        "MedicinalProductPackaged.packageItem.packageItem".to_string(),
        "MedicinalProductPackaged.packageItem".to_string(),
    );
    map.insert(
        "Observation.component.referenceRange".to_string(),
        "Observation.referenceRange".to_string(),
    );
    map.insert(
        "OperationDefinition.parameter.part".to_string(),
        "OperationDefinition.parameter".to_string(),
    );
    map.insert(
        "Parameters.parameter.part".to_string(),
        "Parameters.parameter".to_string(),
    );
    map.insert(
        "PlanDefinition.action.action".to_string(),
        "PlanDefinition.action".to_string(),
    );
    map.insert("Provenance.entity.agent".to_string(), "Provenance.agent".to_string());
    map.insert("Questionnaire.item.item".to_string(), "Questionnaire.item".to_string());
    map.insert(
        "QuestionnaireResponse.item.answer.item".to_string(),
        "QuestionnaireResponse.item".to_string(),
    );
    map.insert(
        "QuestionnaireResponse.item.item".to_string(),
        "QuestionnaireResponse.item".to_string(),
    );
    map.insert(
        "RequestGroup.action.action".to_string(),
        "RequestGroup.action".to_string(),
    );
    map.insert(
        "StructureMap.group.rule.rule".to_string(),
        "StructureMap.group.rule".to_string(),
    );
    map.insert(
        "SubstanceSpecification.molecularWeight".to_string(),
        "SubstanceSpecification.structure.isotope.molecularWeight".to_string(),
    );
    map.insert(
        "SubstanceSpecification.name.synonym".to_string(),
        "SubstanceSpecification.name".to_string(),
    );
    map.insert(
        "SubstanceSpecification.name.translation".to_string(),
        "SubstanceSpecification.name".to_string(),
    );
    map.insert(
        "SubstanceSpecification.structure.molecularWeight".to_string(),
        "SubstanceSpecification.structure.isotope.molecularWeight".to_string(),
    );
    map.insert(
        "TestReport.teardown.action.operation".to_string(),
        "TestReport.setup.action.operation".to_string(),
    );
    map.insert(
        "TestReport.test.action.assert".to_string(),
        "TestReport.setup.action.assert".to_string(),
    );
    map.insert(
        "TestReport.test.action.operation".to_string(),
        "TestReport.setup.action.operation".to_string(),
    );
    map.insert(
        "TestScript.teardown.action.operation".to_string(),
        "TestScript.setup.action.operation".to_string(),
    );
    map.insert(
        "TestScript.test.action.assert".to_string(),
        "TestScript.setup.action.assert".to_string(),
    );
    map.insert(
        "TestScript.test.action.operation".to_string(),
        "TestScript.setup.action.operation".to_string(),
    );
    map.insert(
        "ValueSet.compose.exclude".to_string(),
        "ValueSet.compose.include".to_string(),
    );
    map.insert(
        "ValueSet.expansion.contains.contains".to_string(),
        "ValueSet.expansion.contains".to_string(),
    );
    map.insert(
        "ValueSet.expansion.contains.designation".to_string(),
        "ValueSet.compose.include.concept.designation".to_string(),
    );
    map
}
