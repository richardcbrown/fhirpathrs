use std::collections::HashMap;

pub fn choice_type_paths() -> HashMap<String, Vec<String>> {
    HashMap::from([
        (
            "ActivityDefinition.product".to_string(),
            vec!["Reference".to_string(), "CodeableConcept".to_string()],
        ),
        (
            "ActivityDefinition.timing".to_string(),
            vec![
                "Timing".to_string(),
                "DateTime".to_string(),
                "Period".to_string(),
                "Range".to_string(),
            ],
        ),
        (
            "AllergyIntolerance.onset".to_string(),
            vec![
                "DateTime".to_string(),
                "Age".to_string(),
                "Period".to_string(),
                "Range".to_string(),
                "String".to_string(),
            ],
        ),
        (
            "Annotation.author".to_string(),
            vec!["Reference".to_string(), "String".to_string()],
        ),
        (
            "CarePlan.activity.detail.product".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "CarePlan.activity.detail.scheduled".to_string(),
            vec![
                "Timing".to_string(),
                "Period".to_string(),
                "String".to_string(),
            ],
        ),
        (
            "ChargeItem.occurrence".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Timing".to_string(),
            ],
        ),
        (
            "Claim.accident.location".to_string(),
            vec!["Address".to_string(), "Reference".to_string()],
        ),
        (
            "Claim.diagnosis.diagnosis".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "Claim.information.timing".to_string(),
            vec!["Date".to_string(), "Period".to_string()],
        ),
        (
            "Claim.information.value".to_string(),
            vec![
                "String".to_string(),
                "Quantity".to_string(),
                "Attachment".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "Claim.item.location".to_string(),
            vec![
                "CodeableConcept".to_string(),
                "Address".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "Claim.item.serviced".to_string(),
            vec!["Date".to_string(), "Period".to_string()],
        ),
        (
            "Claim.procedure.procedure".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "ClinicalImpression.effective".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "ClinicalImpression.finding.item".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "CodeSystem.concept.property.value".to_string(),
            vec![
                "Code".to_string(),
                "Coding".to_string(),
                "String".to_string(),
                "Integer".to_string(),
                "Boolean".to_string(),
                "DateTime".to_string(),
            ],
        ),
        (
            "Communication.payload.content".to_string(),
            vec![
                "String".to_string(),
                "Attachment".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "CommunicationRequest.occurrence".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "CommunicationRequest.payload.content".to_string(),
            vec![
                "String".to_string(),
                "Attachment".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "Composition.relatesTo.target".to_string(),
            vec!["Identifier".to_string(), "Reference".to_string()],
        ),
        (
            "ConceptMap.source".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "ConceptMap.target".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Condition.abatement".to_string(),
            vec![
                "DateTime".to_string(),
                "Age".to_string(),
                "Boolean".to_string(),
                "Period".to_string(),
                "Range".to_string(),
                "String".to_string(),
            ],
        ),
        (
            "Condition.onset".to_string(),
            vec![
                "DateTime".to_string(),
                "Age".to_string(),
                "Period".to_string(),
                "Range".to_string(),
                "String".to_string(),
            ],
        ),
        (
            "Consent.source".to_string(),
            vec![
                "Attachment".to_string(),
                "Identifier".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "Contract.binding".to_string(),
            vec!["Attachment".to_string(), "Reference".to_string()],
        ),
        (
            "Contract.friendly.content".to_string(),
            vec!["Attachment".to_string(), "Reference".to_string()],
        ),
        (
            "Contract.legal.content".to_string(),
            vec!["Attachment".to_string(), "Reference".to_string()],
        ),
        (
            "Contract.rule.content".to_string(),
            vec!["Attachment".to_string(), "Reference".to_string()],
        ),
        (
            "Contract.term.valuedItem.entity".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "Contract.valuedItem.entity".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "DataRequirement.codeFilter.valueSet".to_string(),
            vec!["String".to_string(), "Reference".to_string()],
        ),
        (
            "DataRequirement.dateFilter.value".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Duration".to_string(),
            ],
        ),
        (
            "DeviceRequest.code".to_string(),
            vec!["Reference".to_string(), "CodeableConcept".to_string()],
        ),
        (
            "DeviceRequest.occurrence".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Timing".to_string(),
            ],
        ),
        (
            "DeviceUseStatement.timing".to_string(),
            vec![
                "Timing".to_string(),
                "Period".to_string(),
                "DateTime".to_string(),
            ],
        ),
        (
            "DiagnosticReport.effective".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "DocumentManifest.content.p".to_string(),
            vec!["Attachment".to_string(), "Reference".to_string()],
        ),
        (
            "Dosage.asNeeded".to_string(),
            vec!["Boolean".to_string(), "CodeableConcept".to_string()],
        ),
        (
            "Dosage.dose".to_string(),
            vec!["Range".to_string(), "Quantity".to_string()],
        ),
        (
            "Dosage.rate".to_string(),
            vec![
                "Ratio".to_string(),
                "Range".to_string(),
                "Quantity".to_string(),
            ],
        ),
        (
            "ElementDefinition.binding.valueSet".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "ElementDefinition.defaultValue".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "ElementDefinition.example.value".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "ElementDefinition.extension.value".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "ElementDefinition.fixed".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "ElementDefinition.maxValue".to_string(),
            vec![
                "Date".to_string(),
                "DateTime".to_string(),
                "Instant".to_string(),
                "Time".to_string(),
                "Decimal".to_string(),
                "Integer".to_string(),
                "PositiveInt".to_string(),
                "UnsignedInt".to_string(),
                "Quantity".to_string(),
            ],
        ),
        (
            "ElementDefinition.minValue".to_string(),
            vec![
                "Date".to_string(),
                "DateTime".to_string(),
                "Instant".to_string(),
                "Time".to_string(),
                "Decimal".to_string(),
                "Integer".to_string(),
                "PositiveInt".to_string(),
                "UnsignedInt".to_string(),
                "Quantity".to_string(),
            ],
        ),
        (
            "ElementDefinition.pattern".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "EligibilityRequest.serviced".to_string(),
            vec!["Date".to_string(), "Period".to_string()],
        ),
        (
            "EligibilityResponse.insurance.benefitBalance.financial.allowed".to_string(),
            vec![
                "UnsignedInt".to_string(),
                "String".to_string(),
                "Money".to_string(),
            ],
        ),
        (
            "EligibilityResponse.insurance.benefitBalance.financial.used".to_string(),
            vec!["UnsignedInt".to_string(), "Money".to_string()],
        ),
        (
            "ExplanationOfBenefit.accident.location".to_string(),
            vec!["Address".to_string(), "Reference".to_string()],
        ),
        (
            "ExplanationOfBenefit.benefitBalance.financial.allowed".to_string(),
            vec![
                "UnsignedInt".to_string(),
                "String".to_string(),
                "Money".to_string(),
            ],
        ),
        (
            "ExplanationOfBenefit.benefitBalance.financial.used".to_string(),
            vec!["UnsignedInt".to_string(), "Money".to_string()],
        ),
        (
            "ExplanationOfBenefit.diagnosis.diagnosis".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "ExplanationOfBenefit.information.timing".to_string(),
            vec!["Date".to_string(), "Period".to_string()],
        ),
        (
            "ExplanationOfBenefit.information.value".to_string(),
            vec![
                "String".to_string(),
                "Quantity".to_string(),
                "Attachment".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "ExplanationOfBenefit.item.location".to_string(),
            vec![
                "CodeableConcept".to_string(),
                "Address".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "ExplanationOfBenefit.item.serviced".to_string(),
            vec!["Date".to_string(), "Period".to_string()],
        ),
        (
            "ExplanationOfBenefit.procedure.procedure".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "Extension.value".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "FamilyMemberHistory.age".to_string(),
            vec!["Age".to_string(), "Range".to_string(), "String".to_string()],
        ),
        (
            "FamilyMemberHistory.born".to_string(),
            vec![
                "Period".to_string(),
                "Date".to_string(),
                "String".to_string(),
            ],
        ),
        (
            "FamilyMemberHistory.condition.onset".to_string(),
            vec![
                "Age".to_string(),
                "Range".to_string(),
                "Period".to_string(),
                "String".to_string(),
            ],
        ),
        (
            "FamilyMemberHistory.deceased".to_string(),
            vec![
                "Boolean".to_string(),
                "Age".to_string(),
                "Range".to_string(),
                "Date".to_string(),
                "String".to_string(),
            ],
        ),
        (
            "Goal.start".to_string(),
            vec!["Date".to_string(), "CodeableConcept".to_string()],
        ),
        (
            "Goal.target.detail".to_string(),
            vec![
                "Quantity".to_string(),
                "Range".to_string(),
                "CodeableConcept".to_string(),
            ],
        ),
        (
            "Goal.target.due".to_string(),
            vec!["Date".to_string(), "Duration".to_string()],
        ),
        (
            "Group.characteristic.value".to_string(),
            vec![
                "CodeableConcept".to_string(),
                "Boolean".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
            ],
        ),
        (
            "GuidanceResponse.reason".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "ImplementationGuide.package.resource.source".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Media.occurrence".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "Medication.ingredient.item".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "Medication.package.content.item".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "MedicationAdministration.dosage.rate".to_string(),
            vec!["Ratio".to_string(), "Quantity".to_string()],
        ),
        (
            "MedicationAdministration.effective".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "MedicationAdministration.medication".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "MedicationDispense.medication".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "MedicationDispense.notDoneReason".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "MedicationRequest.medication".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "MedicationStatement.effective".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "MedicationStatement.medication".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "NutritionOrder.enteralFormula.administration.rate".to_string(),
            vec!["Quantity".to_string(), "Ratio".to_string()],
        ),
        (
            "Observation.component.value".to_string(),
            vec![
                "Quantity".to_string(),
                "CodeableConcept".to_string(),
                "String".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "SampledData".to_string(),
                "Attachment".to_string(),
                "Time".to_string(),
                "DateTime".to_string(),
                "Period".to_string(),
            ],
        ),
        (
            "Observation.effective".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "Observation.value".to_string(),
            vec![
                "Quantity".to_string(),
                "CodeableConcept".to_string(),
                "String".to_string(),
                "Boolean".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "SampledData".to_string(),
                "Attachment".to_string(),
                "Time".to_string(),
                "DateTime".to_string(),
                "Period".to_string(),
            ],
        ),
        (
            "OperationDefinition.parameter.binding.valueSet".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Parameters.parameter.value".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "Patient.deceased".to_string(),
            vec!["Boolean".to_string(), "DateTime".to_string()],
        ),
        (
            "Patient.multipleBirth".to_string(),
            vec!["Boolean".to_string(), "Integer".to_string()],
        ),
        (
            "PlanDefinition.action.relatedAction.offset".to_string(),
            vec!["Duration".to_string(), "Range".to_string()],
        ),
        (
            "PlanDefinition.action.timing".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Duration".to_string(),
                "Range".to_string(),
                "Timing".to_string(),
            ],
        ),
        (
            "PlanDefinition.goal.target.detail".to_string(),
            vec![
                "Quantity".to_string(),
                "Range".to_string(),
                "CodeableConcept".to_string(),
            ],
        ),
        (
            "Procedure.performed".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "ProcedureRequest.asNeeded".to_string(),
            vec!["Boolean".to_string(), "CodeableConcept".to_string()],
        ),
        (
            "ProcedureRequest.occurrence".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Timing".to_string(),
            ],
        ),
        (
            "Provenance.agent.onBehalfOf".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Provenance.agent.who".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Provenance.entity.what".to_string(),
            vec![
                "Uri".to_string(),
                "Reference".to_string(),
                "Identifier".to_string(),
            ],
        ),
        (
            "Questionnaire.item.enableWhen.answer".to_string(),
            vec![
                "Boolean".to_string(),
                "Decimal".to_string(),
                "Integer".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Time".to_string(),
                "String".to_string(),
                "Uri".to_string(),
                "Attachment".to_string(),
                "Coding".to_string(),
                "Quantity".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "Questionnaire.item.initial".to_string(),
            vec![
                "Boolean".to_string(),
                "Decimal".to_string(),
                "Integer".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Time".to_string(),
                "String".to_string(),
                "Uri".to_string(),
                "Attachment".to_string(),
                "Coding".to_string(),
                "Quantity".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "Questionnaire.item.option.value".to_string(),
            vec![
                "Integer".to_string(),
                "Date".to_string(),
                "Time".to_string(),
                "String".to_string(),
                "Coding".to_string(),
            ],
        ),
        (
            "QuestionnaireResponse.item.answer.value".to_string(),
            vec![
                "Boolean".to_string(),
                "Decimal".to_string(),
                "Integer".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Time".to_string(),
                "String".to_string(),
                "Uri".to_string(),
                "Attachment".to_string(),
                "Coding".to_string(),
                "Quantity".to_string(),
                "Reference".to_string(),
            ],
        ),
        (
            "ReferralRequest.occurrence".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "RequestGroup.action.relatedAction.offset".to_string(),
            vec!["Duration".to_string(), "Range".to_string()],
        ),
        (
            "RequestGroup.action.timing".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Duration".to_string(),
                "Range".to_string(),
                "Timing".to_string(),
            ],
        ),
        (
            "RequestGroup.reason".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "RiskAssessment.occurrence".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "RiskAssessment.prediction.probability".to_string(),
            vec!["Decimal".to_string(), "Range".to_string()],
        ),
        (
            "RiskAssessment.prediction.when".to_string(),
            vec!["Period".to_string(), "Range".to_string()],
        ),
        (
            "RiskAssessment.reason".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "Signature.onBehalfOf".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Signature.who".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Specimen.collection.collected".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "Specimen.container.additive".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "Specimen.processing.time".to_string(),
            vec!["DateTime".to_string(), "Period".to_string()],
        ),
        (
            "StructureMap.group.rule.source.defaultValue".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "StructureMap.group.rule.target.parameter.value".to_string(),
            vec![
                "Id".to_string(),
                "String".to_string(),
                "Boolean".to_string(),
                "Integer".to_string(),
                "Decimal".to_string(),
            ],
        ),
        (
            "Substance.ingredient.substance".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "SupplyDelivery.occurrence".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Timing".to_string(),
            ],
        ),
        (
            "SupplyDelivery.suppliedItem.item".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "SupplyRequest.occurrence".to_string(),
            vec![
                "DateTime".to_string(),
                "Period".to_string(),
                "Timing".to_string(),
            ],
        ),
        (
            "SupplyRequest.orderedItem.item".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "SupplyRequest.reason".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
        (
            "Task.definition".to_string(),
            vec!["Uri".to_string(), "Reference".to_string()],
        ),
        (
            "Task.input.value".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "Task.output.value".to_string(),
            vec![
                "Base64Binary".to_string(),
                "Boolean".to_string(),
                "Code".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
                "Decimal".to_string(),
                "Id".to_string(),
                "Instant".to_string(),
                "Integer".to_string(),
                "Markdown".to_string(),
                "Oid".to_string(),
                "PositiveInt".to_string(),
                "String".to_string(),
                "Time".to_string(),
                "UnsignedInt".to_string(),
                "Uri".to_string(),
                "Address".to_string(),
                "Age".to_string(),
                "Annotation".to_string(),
                "Attachment".to_string(),
                "CodeableConcept".to_string(),
                "Coding".to_string(),
                "ContactPoint".to_string(),
                "Count".to_string(),
                "Distance".to_string(),
                "Duration".to_string(),
                "HumanName".to_string(),
                "Identifier".to_string(),
                "Money".to_string(),
                "Period".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
                "Ratio".to_string(),
                "Reference".to_string(),
                "SampledData".to_string(),
                "Signature".to_string(),
                "Timing".to_string(),
                "Meta".to_string(),
            ],
        ),
        (
            "Timing.repeat.bounds".to_string(),
            vec![
                "Duration".to_string(),
                "Range".to_string(),
                "Period".to_string(),
            ],
        ),
        (
            "TriggerDefinition.eventTiming".to_string(),
            vec![
                "Timing".to_string(),
                "Reference".to_string(),
                "Date".to_string(),
                "DateTime".to_string(),
            ],
        ),
        (
            "UsageContext.value".to_string(),
            vec![
                "CodeableConcept".to_string(),
                "Quantity".to_string(),
                "Range".to_string(),
            ],
        ),
        (
            "ValueSet.expansion.parameter.value".to_string(),
            vec![
                "String".to_string(),
                "Boolean".to_string(),
                "Integer".to_string(),
                "Decimal".to_string(),
                "Uri".to_string(),
                "Code".to_string(),
            ],
        ),
        (
            "VisionPrescription.reason".to_string(),
            vec!["CodeableConcept".to_string(), "Reference".to_string()],
        ),
    ])
}
